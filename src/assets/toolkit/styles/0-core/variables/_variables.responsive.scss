/*============================================================================*\
| RESPONSIVE ATTRIBUTES
\*============================================================================*/

////
/// Defines properties related to general responsive behaviour.
///
/// **Note**: Use `em` units as a responsive breakpoints!
///
/// @required `sass-mq`
///
/// @example scss
///   // Apply styling to mobile and upwards
///     @include breakpoint($from: mobile) {
///       color: red;
///   }
///   // Apply styling up to devices smaller than tablets (exclude tablets)
///   @include breakpoint($until: tablet) {
///       color: blue;
///   }
///   // Same thing, in landscape orientation
///   @include breakpoint($until: tablet, $and: '(orientation: landscape)') {
///       color: hotpink;
///   }
///   // Apply styling to tablets up to desktop (exclude desktop)
///   @include breakpoint(tablet, desktop) {
///       color: green;
///   }
///
/// @group responsive


/* = SASS-MQ SETTINGS ======================================================= */


/// @link https://github.com/sass-mq/sass-mq#how-to-use-it
// To enable support for browsers that do not support @media queries,
// (IE <= 8, Firefox <= 3, Opera <= 9) set $mq-responsive to false
// Create a separate stylesheet served exclusively to these browsers,
// meaning @media queries will be rasterized, relying on the cascade itself
$mq-responsive: true;

// If you want to display the currently active breakpoint in the top
// right corner of your site during development, add the breakpoints
// to this list, ordered by width, e.g. (mobile, tablet, desktop).
$mq-show-breakpoints: (
  mobile,
  mobile-large,
  tablet,
  desktop
);





/* = BREAKPOINT DEFINITIONS ================================================= */


/// @type {Map} - Min-widths of all main devices.
$mq-breakpoints: (
  'mobile':       .01em,
  'mobile-large': 30em,
  'tablet':       43em,
  'desktop':      61em,
  'desktop-large': 88em, // TODO: Use $base-width
);




// TODO: Order properly!
$mobile-max-width:          30em;
$mobile-layout-ratio:       .85;


$mobile-large-min-width:    30em;
$mobile-large-max-width:    43em;
$mobile-large-layout-ratio: .9;


$tablet-min-width:          43em;
$tablet-max-width:          61em;
$tablet-layout-ratio:       .95;

$desktop-min-width:         61em;
$desktop-max-width:         $base-width; // Update to EM

$desktop-large-min-width:   $base-width; // Update to EM


// Alias
@mixin bp( $args... ) {
  @include mq( $args... ) {
    @content;
  }
}


/* ===== BREAKPOINTS ======================================================== */


// Small-screen mobile devices

$mobile:                    'screen and ( max-width: #{$mobile-max-width} )';


// Medium-size to large mobile devices

$mobile-large:              'screen and ( max-width: #{$mobile-large-max-width} ) and ( min-width: #{$mobile-large-min-width} )';
$mobile-large-and-smaller:  'screen and ( max-width: #{$mobile-large-max-width} )';
$mobile-large-and-bigger:   'screen and ( min-width: #{$mobile-large-min-width} )';


// Tablet devices

$tablet:                    'screen and ( max-width: #{$tablet-max-width} ) and ( min-width: #{$tablet-min-width} )';
$tablet-and-smaller:        'screen and ( max-width: #{$tablet-max-width})';
$tablet-and-bigger:         'screen and ( min-width: #{$tablet-min-width})';


// Smaller desktop devices

$desktop:                   'screen and ( max-width: #{$desktop-max-width} ) and ( min-width: #{$desktop-min-width} )';
$desktop-and-smaller:       'screen and ( max-width: #{$desktop-max-width} )';
$desktop-and-bigger:        'screen and ( min-width: #{$desktop-min-width} )';


// Large desktop devices

$desktop-large:             'screen and ( min-width: #{$desktop-large-min-width} )';

@mixin breakpoint( $devices-range ) {
  @media #{$devices-range} {
    @content;
  }
}
