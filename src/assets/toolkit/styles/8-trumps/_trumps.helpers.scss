.clearfix { @include clearfix; }

.align-left { text-align: left !important; }
.align-center { text-align: center !important; }
.align-right { text-align: right !important; }

.float-left { float: left !important; }
.float-right { float: right !important; }

.hidden { display: none !important; }
.u-emphasis { text-transform: uppercase;}

// UTLITY CLASSES FOR MARGINS AND PADDING
/*
This .scss loop will create "margin helpers" and "padding helpers" for use in your web projects.
It will generate several classes such as:
.mr1 which gives margin-right 10 pixels.
.mr1 gives MARGIN to the RIGHT 15 pixels.
.mt15 gives MARGIN to the TOP 15 pixels and so on.
.pb5 gives PADDING to the BOTTOM of 5 pixels
.pl4 gives PADDING to the LEFT of 40 pixels
The first letter is "m" or "p" for MARGIN or PADDING
Second letter is "t", "b", "l", or "r" for TOP, BOTTOM, LEFT, or RIGHT
Third letter is the number of spacing in pixels. Adjust the amounts generated by editing the $spaceamounts variable below.
https://gist.github.com/jacurtis/30da4bf9a6c9b9b5cc0aebac512ca7c9
*/

$spaceamounts: (0, 1, 2, 3); // Adjust this to include the rem amounts you need.
$sides: (top, bottom, left, right); // Leave this variable alone

// @each $space in $spaceamounts {
//   @each $side in $sides {
//     .m#{str-slice($side, 0, 1)}#{$space} {
//       margin-#{$side}: #{$space}rem !important;
//     }

//     .p#{str-slice($side, 0, 1)}#{$space} {
//       padding-#{$side}: #{$space}rem !important;
//     }
//   }
// }

// // Build for margin helpers with no direction
// @each $space in $spaceamounts {
//     .m#{$space} {
//       margin: #{$space}rem !important;
//     }

//     .p#{$space} {
//       padding: #{$space}rem !important;
//     }
// }

// https://stackoverflow.com/questions/58069059/dynamic-spacing-classes-with-sass

@mixin generate($prefix, $property) {
  // List of sizes to generate for each
  $sizes: [0, .25, .5, 1, 1.5, 2];
  // Spacing to multiply the sizes by
  $spacing: 1rem;

  // Loop through all of the sizes(we use @for rather than @each, as we want access to the index)
  @for $i from 1 through length($sizes) {
    // Get the size for the current index
    $size: nth($sizes, $i);

    // Create the rule
    .#{$prefix}#{$i - 1} {
      #{$property}: $spacing * $size !important;
    }
  }
}

$rules: [
  [m, margin],
  [ml, margin-left],
  [mt, margin-top],
  [mb, margin-bottom],
  [mr, margin-right],
  [p, padding],
  [pl, padding-left],
  [pt, padding-top],
  [pb, padding-bottom],
  [pr, padding-right],
];

@each $item in $rules {
  @include generate(nth($item, 1), nth($item, 2));
}
